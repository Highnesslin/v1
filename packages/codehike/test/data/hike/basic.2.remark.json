{
  "type": "root",
  "children": [
    {
      "type": "mdxjsEsm",
      "value": "import { CodeWithNotes } from \"@/components/code/code-with-notes\"",
      "data": {
        "estree": {
          "type": "Program",
          "body": [
            {
              "type": "ImportDeclaration",
              "specifiers": [
                {
                  "type": "ImportSpecifier",
                  "imported": { "type": "Identifier", "name": "CodeWithNotes" },
                  "local": { "type": "Identifier", "name": "CodeWithNotes" }
                }
              ],
              "source": {
                "type": "Literal",
                "value": "@/components/code/code-with-notes",
                "raw": "\"@/components/code/code-with-notes\""
              }
            }
          ],
          "sourceType": "module",
          "comments": []
        }
      }
    },
    {
      "type": "heading",
      "depth": 2,
      "children": [{ "type": "text", "value": "!demo" }]
    },
    {
      "type": "paragraph",
      "children": [
        { "type": "text", "value": "Add callouts inside your code blocks." }
      ]
    },
    {
      "type": "mdxJsxFlowElement",
      "name": "Demo",
      "attributes": [
        { "type": "mdxJsxAttribute", "name": "name", "value": "callout" }
      ],
      "children": [],
      "data": { "_mdxExplicitJsx": true }
    },
    {
      "type": "heading",
      "depth": 2,
      "children": [{ "type": "text", "value": "!implementation" }]
    },
    {
      "type": "mdxJsxFlowElement",
      "name": "CodeWithNotes",
      "attributes": [],
      "children": [
        {
          "type": "code",
          "lang": "tsx",
          "meta": "! code.tsx",
          "value": "import { InlineAnnotation, AnnotationHandler } from \"codehike/code\"\r\n\r\nconst callout: AnnotationHandler = {\r\n  name: \"callout\",\r\n  // !callout[/transform/] transform-annotations\r\n  transform: (annotation: InlineAnnotation) => {\r\n    const { name, query, lineNumber, fromColumn, toColumn, data } = annotation\r\n    return {\r\n      name,\r\n      query,\r\n      fromLineNumber: lineNumber,\r\n      toLineNumber: lineNumber,\r\n      // !callout[/column/] column\r\n      data: { ...data, column: (fromColumn + toColumn) / 2 },\r\n    }\r\n  },\r\n  Block: ({ annotation, children }) => {\r\n    const { column } = annotation.data\r\n    // !fold[/className=\"(.*?)\"/gm]\r\n    return (\r\n      <>\r\n        {children}\r\n        <div\r\n          style={{ minWidth: `${column + 4}ch` }}\r\n          className=\"w-fit border bg-zinc-800 border-current rounded px-2 relative -ml-[1ch] mt-1 whitespace-break-spaces\"\r\n        >\r\n          <div\r\n            style={{ left: `${column}ch` }}\r\n            className=\"absolute border-l border-t border-current w-2 h-2 rotate-45 -translate-y-1/2 -top-[1px] bg-zinc-800\"\r\n          />\r\n          {annotation.query}\r\n        </div>\r\n      </>\r\n    )\r\n  },\r\n}"
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [
            { "type": "text", "value": "!!notes transform-annotations" }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "We need to transform the annotations from "
            },
            { "type": "inlineCode", "value": "InlineAnnotation" },
            { "type": "text", "value": " to " },
            { "type": "inlineCode", "value": "BlockAnnotation" }
          ]
        },
        {
          "type": "heading",
          "depth": 2,
          "children": [{ "type": "text", "value": "!!notes column" }]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This will be the position of the arrow in the callout"
            }
          ]
        }
      ],
      "data": { "_mdxExplicitJsx": true }
    },
    {
      "type": "paragraph",
      "children": [
        { "type": "text", "value": "Then pass the " },
        { "type": "inlineCode", "value": "callout" },
        { "type": "text", "value": " handler to the " },
        { "type": "inlineCode", "value": "Pre" },
        { "type": "text", "value": " component:" }
      ]
    },
    {
      "type": "code",
      "lang": "tsx",
      "meta": "code.tsx ln",
      "value": "async function Code({ codeblock }: { codeblock: RawCode }) {\r\n  const highlighted = await highlight(codeblock, \"github-dark\")\r\n  return <Pre code={highlighted} handlers={[callout]} />\r\n}"
    },
    {
      "type": "heading",
      "depth": 2,
      "children": [{ "type": "text", "value": "Make it better" }]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "Some ways to improve the callout annotation:"
        }
      ]
    },
    {
      "type": "list",
      "ordered": false,
      "spread": false,
      "children": [
        {
          "type": "listItem",
          "spread": false,
          "checked": null,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "add different annotations with different styles (like Warning, Error, Info, etc)"
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "spread": false,
          "checked": null,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "add an option to show the callout either before or after the line"
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "spread": false,
          "checked": null,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "put markdown inside the callout (see the "
                },
                {
                  "type": "link",
                  "title": null,
                  "url": "/docs/code/tooltip/",
                  "children": [{ "type": "text", "value": "tooltip example" }]
                },
                { "type": "text", "value": ")" }
              ]
            }
          ]
        }
      ]
    }
  ]
}
